//go:build test

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/models/user_group.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/models/user_group.go -destination=internal/core/models/mocks/mock_user_group_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/jaomello26/booking-app-backend/internal/core/models"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserGroupRepository is a mock of UserGroupRepository interface.
type MockUserGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserGroupRepositoryMockRecorder
	isgomock struct{}
}

// MockUserGroupRepositoryMockRecorder is the mock recorder for MockUserGroupRepository.
type MockUserGroupRepositoryMockRecorder struct {
	mock *MockUserGroupRepository
}

// NewMockUserGroupRepository creates a new mock instance.
func NewMockUserGroupRepository(ctrl *gomock.Controller) *MockUserGroupRepository {
	mock := &MockUserGroupRepository{ctrl: ctrl}
	mock.recorder = &MockUserGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserGroupRepository) EXPECT() *MockUserGroupRepositoryMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m *MockUserGroupRepository) AddMember(ctx context.Context, userGroup *models.UserGroup) (*models.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", ctx, userGroup)
	ret0, _ := ret[0].(*models.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMember indicates an expected call of AddMember.
func (mr *MockUserGroupRepositoryMockRecorder) AddMember(ctx, userGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockUserGroupRepository)(nil).AddMember), ctx, userGroup)
}

// AddMemberTx mocks base method.
func (m *MockUserGroupRepository) AddMemberTx(ctx context.Context, tx *gorm.DB, group *models.UserGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemberTx", ctx, tx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMemberTx indicates an expected call of AddMemberTx.
func (mr *MockUserGroupRepositoryMockRecorder) AddMemberTx(ctx, tx, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemberTx", reflect.TypeOf((*MockUserGroupRepository)(nil).AddMemberTx), ctx, tx, group)
}

// GetGroupMembers mocks base method.
func (m *MockUserGroupRepository) GetGroupMembers(ctx context.Context, groupId uint) ([]*models.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMembers", ctx, groupId)
	ret0, _ := ret[0].([]*models.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembers indicates an expected call of GetGroupMembers.
func (mr *MockUserGroupRepositoryMockRecorder) GetGroupMembers(ctx, groupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembers", reflect.TypeOf((*MockUserGroupRepository)(nil).GetGroupMembers), ctx, groupId)
}

// GetUserRole mocks base method.
func (m *MockUserGroupRepository) GetUserRole(ctx context.Context, userId, groupId uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRole", ctx, userId, groupId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRole indicates an expected call of GetUserRole.
func (mr *MockUserGroupRepositoryMockRecorder) GetUserRole(ctx, userId, groupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRole", reflect.TypeOf((*MockUserGroupRepository)(nil).GetUserRole), ctx, userId, groupId)
}

// RemoveMember mocks base method.
func (m *MockUserGroupRepository) RemoveMember(ctx context.Context, userId, groupId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", ctx, userId, groupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockUserGroupRepositoryMockRecorder) RemoveMember(ctx, userId, groupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockUserGroupRepository)(nil).RemoveMember), ctx, userId, groupId)
}

// UpdateMemberRole mocks base method.
func (m *MockUserGroupRepository) UpdateMemberRole(ctx context.Context, userId, groupId uint, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberRole", ctx, userId, groupId, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemberRole indicates an expected call of UpdateMemberRole.
func (mr *MockUserGroupRepositoryMockRecorder) UpdateMemberRole(ctx, userId, groupId, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberRole", reflect.TypeOf((*MockUserGroupRepository)(nil).UpdateMemberRole), ctx, userId, groupId, role)
}
